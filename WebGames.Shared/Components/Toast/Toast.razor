@using System.Timers
@inject IToastService _toast

<div class="@ToastClass @ToastLocation toastr">
    <div class="toastr-header">
        <a class="btn btn-link link-danger ms-auto close p-0" aria-label="Close" @onclick='OffToast'><i class="bi bi-x fs-3 p-0"></i></a>
    </div>
    <div class="toastr-body text-center pb-1">
        @ToastMessage
    </div>
</div>

@code {

    public string ToastMessage { get; set; } = "Thank You!";

    public string? ToastClass { get; set; }

    [Parameter]
    public string ToastLocation { get; set; } = "top";

    /// <summary>
    /// the time (ms) a toast notification should be visible for. Default 4000.
    /// </summary>
    [Parameter]
    public int ToastDuration { get; set; } = 4000;

    Timer _timer = default!;

    public void OnToast(Object? sender, ToastEventArgs args)
    {
        _timer = new();
        _timer.Interval = ToastDuration;
        ToastClass = args.CssClass;
        Console.WriteLine(ToastClass);
        ToastMessage = args.Message;
        ToastLocation = args.Location;
        StateHasChanged();
        _timer.Elapsed += async (Object? sender, System.Timers.ElapsedEventArgs args) =>
        {
            _timer.Stop();
            await OffToast();
        };
        _timer.Start();
    }

    public async Task OffToast()
    {
        ToastClass = "hide-toast";
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {

        ToastClass = "hide-toast";
        _toast.ToastEvent += OnToast;
        base.OnInitialized();
    }
}