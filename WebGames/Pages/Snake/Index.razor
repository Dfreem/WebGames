@page "/snake"
@using WebGames.Games
@using WebGames.Games.Snake
@inject IJSRuntime _js
@inject IToastService _toast


<div class="game-page-title">
    <div class=" m-0 p-0 text-yellow-400">Snek</div>
</div>
<div class="container-fluid">
    <div class="screen-grid mx-auto">

        <div class="container">

            @for (int x = 0; x < Game.Grid.GetLength(0); x++)
            {
                <div class="d-flex flex-wrap row justify-content-center">

                    @for (int m = 0; m < Game.Grid.GetLength(1); m++)
                    {
                        switch (Game.Grid[m, x].SectionType)
                        {
                            case (SectionType.DefaultSection):
                                <div class="default-section">
                                    &emsp;
                                </div>
                                break;
                            case (SectionType.Food):
                                <div class="food-section">
                                    &emsp;
                                </div>
                                break;
                            default:
                                <div class="snake-section">
                                    &emsp;
                                </div>
                                break;
                        }
                    }
                </div>
            }
        </div>
        <Menu Title="Start" MenuId="snake-game" MenuText="@MenuMessage">
            <button class="btn btn-success" @onclick='RunGame' data-bs-dismiss="modal">
                Start Game
            </button>
        </Menu>
    </div>
</div>


@code {
    public SnakeGame Game { get; set; } = default!;

    public KeyboardListener KeyWatcher { get; set; } = default!;

    public GameManager Manager { get; set; } = default!;

    public string MenuMessage { get; set; } = "start snake";

    public bool ShowMenu { get; set; } = true;

    public record DebugDTO(string PlayerLocation, string Direction, string DirectionVector, string FoodLocation, int Score, string Grid);

    public DebugDTO? Debug { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
        await base.OnInitializedAsync();
    }

    public void OnGameOver(Object? sender, EventArgs args)
    {
        string message = $"You died.\nScore: {Game.Player.Score}";
        _toast.Info(message);
        Manager.Quit();
        InvokeAsync(Initialize);
        StateHasChanged();
    }

    public void Update(Object? sender, EventArgs args)
    {
        Game.Update();
        Draw();
        StateHasChanged();

    }

    public void OnEscape(Object? sender, EventArgs args)
    {
        _toast.Info("Escape pressed");
        Manager.IsRunning = false;
        Manager.Quit();
        StateHasChanged();
    }

    public async Task RunGame()
    {
        await Manager.Run();
        StateHasChanged();
    }

    public void Draw()
    {
        Game.BuildGrid();
    }

    public async Task Initialize()
    {
        
        Game = new(1000 / 4);
        Manager = new(Game);
        KeyWatcher = new();
        KeyWatcher.OnLeft += (sender, args) => Game.Player.Left();
        KeyWatcher.OnRight += (sender, args) => Game.Player.Right();
        KeyWatcher.OnUp += (sender, args) => Game.Player.Up();
        KeyWatcher.OnDown += (sender, args) => Game.Player.Down();
        KeyWatcher.OnEsc += OnEscape;
        var module = await _js.InvokeAsync<IJSObjectReference>("import", "./app.js");
        await module.InvokeVoidAsync("initKeyboardListener", DotNetObjectReference.Create(KeyWatcher));
        Manager.Update += Update;
        Game.Player.Snake_Dead += OnGameOver;

    }
}
